name: Nightly update 3Key Harbor image

on:
  schedule:
    - cron: "0 1 * * *"
  workflow_dispatch:

jobs:
  push_to_registry:
    name: Nightly update and push docker images
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      packages: read
      security-events: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.8.1

      - name: Get latest tag
        id: latest
        run: |
          git fetch --tags
          TAG=$(git describe --tags "$(git rev-list --tags --max-count=1)")
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.latest.outputs.tag }}

      - name: Compute major/minor tags
        id: semver
        run: |
          FULL=${{ steps.latest.outputs.tag }}
          MAJOR=${FULL%%.*}
          MINOR=${FULL%.*}
          echo "tags=${FULL},${MINOR},${MAJOR}" >> "$GITHUB_OUTPUT"
          echo "major=${MAJOR}" >> "$GITHUB_OUTPUT"
          echo "minor=${MINOR}" >> "$GITHUB_OUTPUT"
          echo "full=${VER}" >> "$GITHUB_OUTPUT"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to 3Key Harbor
        uses: docker/login-action@v3
        with:
          registry: harbor.3key.company
          username: ${{ secrets.HARBOR_3KEY_USERNAME }}
          password: ${{ secrets.HARBOR_3KEY_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            harbor.3key.company/czertainly-signing/czertainly-csc-api
          tags: |
            type=schedule,pattern=nightly
            type=raw,value=latest
            type=raw,value=${{ steps.semver.outputs.minor }}
            type=raw,value=${{ steps.semver.outputs.major }}
            type=schedule,pattern={{date 'YYYYMMDD'}},priority=900
            type=sha

      - name: Test build Docker image
        id: build-and-load
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          file: ./Dockerfile
          # Build only the host architecture for the pre-scan build;
          # --load works only when a single platform is produced.
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Select tag for scanning
        id: tag
        run: |
          FIRST_TAG="$(echo "${{ steps.meta.outputs.tags }}" | head -n 1)"
          echo "value=$FIRST_TAG" >> "$GITHUB_OUTPUT"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: ${{ steps.tag.outputs.value }}
          format: json
          output: trivy-report.json
          exit-code: 0

      - name: Upload vulnerability report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

      - name: Fail build on vulnerabilities
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: ${{ steps.tag.outputs.value }}
          trivy-config: config/trivy.yaml
          skip-setup-trivy: true

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        id: build-and-push
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file: ./Dockerfile
          push: true
          provenance: mode=max
          sbom: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Sign images with a key
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes --key env://COSIGN_PRIVATE_KEY ${images}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
